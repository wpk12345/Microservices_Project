swagger: "2.0"

info:
  title: "Swagger - Book Service Project"
  description: "Note Service API Documentation for Book Service Project"
  version: "1.0.0"

host: "localhost:1984"

tags:
- name: "notes"
schemes:
- "http"

paths:
  /notes:
    post:
      tags:
      - "notes"
      summary: "Add a new note"
      description: "Add a new note"
      operationId: "addNote"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Note object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Note"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Note"
        405:
          description: "Invalid input"
    get:
      tags:
      - "notes"
      summary: "Get all notes"
      description: "Gets all notes"
      operationId: "getAllNotes"
      produces:
      - "application/json"
      responses:
        200:
          description: "Get all the Note objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Note"
        405:
          description: "Notes not found"

  /notes/{id}:
    get:
      tags:
      - "notes"
      summary: "Find note by ID"
      description: "Returns a single note"
      operationId: "getNoteById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of note to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Note"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Note not found"
    put:
      tags:
      - "notes"
      summary: "Updates a note with form data"
      description: "Updates a note with form data"
      operationId: "updateNoteByID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of note that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Note object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Note"
      responses:
        200:
          description: "Note updated successful operation"
        405:
          description: "Invalid input"
    delete:
      tags:
      - "notes"
      summary: "Deletes a note"
      description: "Deletes a note"
      operationId: "deleteNote"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Note id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Note Deleted"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Note not found"
          
  /notes/book/{id}:
    get:
      tags:
      - "notes"
      summary: "Get all notes by BookId"
      description: "Returns a list of Notes"
      operationId: "getNoteByBookId"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of book to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Get all notes by BookId"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Note"
        405:
          description: "Notes not found"

definitions:
  Note:
    type: "object"
    required:
    - "noteId"
    - "bookId"
    - "note"
    properties:
      noteId:
        type: "integer"
        format: "int64"
      bookId:
        type: "integer"
        format: "int64"
      note:
        type: "string"
        example: "Note"
      author:
        type: "string"
        example: "author"
