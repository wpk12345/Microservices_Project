swagger: "2.0"

info:
  title: "Swagger - Book Service Project"
  description: "The Book Service is a typical Spring Boot REST web service with Controller, DAO, and Service Layer components. The Service Layer will use the Note Queue to update the Note Service; it will directly contact the Note Service (using a Feign client) when retrieving Notes.  Documenting the REST API."
  version: "1.0.0"

host: "localhost:4242"

tags:
- name: "book"

  description: "Everything about Book"

schemes:
- "http"

paths:
  /book:
    post:
      tags:
      - "book"
      summary: "Add a new book"
      description: "Add a new book"
      operationId: "addBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Book object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        405:
          description: "Invalid input"
    get:
      tags:
      - "book"
      summary: "Get all the book"
      description: "Get all the book"
      operationId: "getAllBooks"
      produces:
      - "application/json"
      responses:
        200:
          description: "Get all the Book objects"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        405:
          description: "Books not found"

  /book/{id}:
    get:
      tags:
      - "book"
      summary: "Find book by ID"
      description: "Returns a single book"
      operationId: "getBookById"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of book to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
    put:
      tags:
      - "tasker"
      summary: "Updates a book with form data"
      description: "Updates a book with form data"
      operationId: "updateBookWithID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of book that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Book object that needs to be added"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        200:
          description: "successful operation"
        405:
          description: "Invalid input"
    delete:
      tags:
      - "book"
      summary: "Deletes a book"
      description: "Deletes a book"
      operationId: "deleteBook"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Book id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"


definitions:
  Book:
    type: "object"
    required:
    - "bookId"
    - "title"
    - "author"
    properties:
      bookId:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        example: "Title"
      author:
        type: "string"
        example: "author"
        